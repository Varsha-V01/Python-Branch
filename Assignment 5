Question 1:
Write a recursive function, is_palindrome() to find out whether a string is a palindrome or not. The function should return true, if it is a palindrome. Else it should return false. 

def is_palindrom(word):
    if ( len(word) < 2 ):
        return 0
    else:
        if ( word[0] != word[-1] ):
            return 1 
        else:
            return is_palindrom(word[1:-1])

        
result = is_palindrom('mom')
if (result== 0):
    print('Palindrom')
else:
    print('Not a palindrom')


Question 3:
Given a number n, write a program to find the sum of the largest prime factors of each of nine consecutive numbers starting from n.
g(n) = f(n) + f(n+1) + f(n+2) + f(n+3) + f(n+4) + f(n+5) + f(n+6) + f(n+7) + f(n+8)
where, g(n) is the sum and f(n) is the largest prime factor of n

For example,
g(10)=f(10)+f(11)+f(12)+f(13)+f(14)+f(15)+f(16)+f(17)+f(18) 
        =5 + 11 + 3 + 13 + 7 + 5 + 2 + 17 + 3 
        =66 
        
Question 4:
Write a python function find_smallest_number() which accepts a number n and returns the smallest number having n divisors.
Handle the possible errors in the code written inside the function.

Sample Input	Expected Output
16	120

Question 5:
Write a python function find_duplicates(), which accepts a list of numbers and returns another list containing all the duplicate values in the input list. If there are no duplicate values, it should return an empty list.

Also write the pytest test cases to test the program.

Sample Input	Expected Output
[12,54,68,759,24,15,12,68,987,758,25,69]	[12, 68]

Question 6:
he below function is written to check whether a given three digit number is an Armstrong number.

Hint: An “Armstrong number” is an n-digit number that is equal to the sum of the nth powers of its individual digits.
Example: 371 is an Armstrong number as 371 = 3^3 +7^3+ 1^3

But the function is having errors/bugs, debug the program using the Eclipse debugger and correct it.

