Question1:
Write a python function, find_pairs_of_numbers() which accepts a list of positive integers with no repetitions and returns 
count of pairs of numbers in the list that adds up to n. The function should return 0, if no such pairs are found in the list.

Sample Input	                  Expected Output
[1, 2, 7, 4, 5, 6, 0, 3], 6	           3
[3, 4, 1, 8, 5, 9, 0, 6], 9	           4

def find_pairs_of_numbers(list1, sum):
    
    j=1
    count = 0
    for i in range(0,len(list1)-1):
        for j in range (i+1, len(list1)):
            if (list1[i] + list1[j] == sum):
                count +=1
            
    return count

print (find_pairs_of_numbers([3, 4, 1, 8, 5, 9, 0, 6], 9)) 


Question2:
A teacher is in the process of generating few reports based on the marks scored by the students of her class in a project based assessment.
Assume that the marks of her 10 students are available in a tuple. The marks are out of 25.

Write a python program to implement the following functions:
find_more_than_average(): Find and return the percentage of students who have scored more than the average mark of the class.
generate_frequency(): Find how many students have scored the same marks. 
                      For example, how many have scored 0, how many have scored 1,
                      how many have scored 3â€¦.how many have scored 25. The result should be populated in a list and returned.
sort_marks(): Sort the marks in the increasing order from 0 to 25. The sorted values should be populated in a list and returned.

Sample Input	                                  Expected Output
list_of_marks = (12,18,25,24,2,5,18,20,20,21)	      70.0 
                                                [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 1, 0, 0, 1, 1]
                                                [2, 5, 12, 18, 18, 20, 20, 21, 24, 25]

def find_more_than_average(list_of_marks):
    
    count= 0
    sum_of_marks = sum(list_of_marks)
    avg_of_marks = sum_of_marks/len(list_of_marks)
    
    for i in list_of_marks:
        if (i>=avg_of_marks):
            count +=1
    percent = (count/len(list_of_marks))*100
    
    return percent

def generate_frequency(list_of_marks):
    
    frequency = [None]*26
    for i in range(0,26):
        count = 0
        for j in list_of_marks:
            if (i == j):
                count +=1
        frequency[i] = count
        
    return frequency

def sort_marks(list_of_marks): 
    list1 = sorted(list_of_marks)
    return list1


list_of_marks = (12,18,25,24,2,5,18,20,20,21)

print (find_more_than_average(list_of_marks))   
   
print (generate_frequency(list_of_marks))

print (sort_marks(list_of_marks))   


Question3:
Write a python function, create_largest_number(), which accepts a list of numbers and 
returns the largest number possible by concatenating the list of numbers. 
Note: Assume that all the numbers are two digit numbers.

Sample Input	Expected Output
23,34,55	553423

def create_largest_number(list1):
    
    number=''
    
    sorted_list = sorted(list1,reverse=True)
    print (sorted_list)
    for i in sorted_list:
        number=number+str(i)
        
    return number

print (create_largest_number([23,34,55]))
    

Question4:
Write a python function, check_double(number) which accepts a whole number and returns True if it satisfies the given conditions.
The number and its double should have exactly the same number of digits.
Both the numbers should have the same digits ,but in different order.
Otherwise it should return False.

Example: If the number is 125874 and its double, 251748, contain exactly the same digits, but in a different order.

def check_double(number):
    double_number = number*2
    sort_number = sorted(str(number))
    sort_double_number = sorted(str(double_number))
    
    if (sort_number == sort_double_number):
        print ("True")
    else:
        print("False")
        
check_double(125874)

